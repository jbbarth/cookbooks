#This config file defined Shinken specific objects like
#satellites or Realms
#
#This file is for defining a simple environement :
#*one scheduler that schedules checks (but does not launch them)
#*one poller (that launches checks)
#*one reactionner (that sends notifiations)
#*one broker (that gives jobs to modules. Modules export data like logs, status.dat, mysql export, etc etc)
#*some of the brokers modules (that do the job)
#*one arbiter (that reads the configuration and dispatches it to all others)

#So here no high availability, just a simple "Nagios equivalent" (but with
#more perf and less code! )

#The scheduler is a "Host manager". It get hosts and theirs
#services. It scheduler checks for them.
define scheduler{
       scheduler_name	scheduler-1   ; just the name
       address	localhost             ; ip or dns address of the daemon
       port	7768                  ; tcp port of the daemon

       #optional
       spare	0                     ; (0 = not a spare, 1 = is spare)
       weight		1             ; (some schedulers can manage more hosts than others)
       timeout		3	      ; 'ping' timeout 
       data_timeout	120	      ; 'data send' timeout
       max_check_attempts	3     ;  if at least max_check_attempts ping failed, the node is DEAD
#       modules			PickleRetention,MemcacheRetention
#       modules			NagiosRetention

       #advanced feature
       realm	All                   ; optional (realm are multisites features)
       }


#Pollers launch checks
define poller{
       poller_name	poller-1
       address  	localhost
       port     	7771

       #optional
       manage_sub_realms 0	; optional and advanced: take jobs from schedulers of sub realms?
       min_workers	 4	; optional : start with N processes workers
       max_workers	 4	; optional : no more than N processes workers
       processes_by_worker	256	   ; optional : each workers manage 256 checks
       polling_interval		1       ; optional : take jobs from schedulers each 1 second
       timeout		3	      ; 'ping' timeout 
       data_timeout	120	      ; 'data send' timeout
       max_check_attempts	3     ;  if at least max_check_attempts ping failed, the node is DEAD


       #advanced feature
       realm		All
}


#Reactionner launch notifications
define reactionner{
       reactionner_name		reactionner-1
       address			localhost
       port			7769
       spare			0

       #optionnal
       manage_sub_realms 0	;optionnal : like for poller
       min_workers	 1	;optionnal : like for poller
       max_workers	 15	;optionnal : like for poller
       polling_interval		1       ;optionnal : like for poller
       timeout		3	      ; 'ping' timeout 
       data_timeout	120	      ; 'data send' timeout
       max_check_attempts	3     ;  if at least max_check_attempts ping failed, the node is DEAD

       #optionnal
       realm 			All
       }

#The broker manage data export (in flat file or in database)
#with it's modules
#Here just log files and status.dat file modules
define broker{
       broker_name	broker-1
       address		localhost
       port		7772
       spare		0

       #Which modules to load? Here only status.dat and nagios.log
       modules		 Livestatus, Status-Dat, Simple-log

       #optionnal
       manage_sub_realms 1   ; optionnal, like for poller
       manage_arbiters	 1   ; optionnal : take data from Arbiter. There should be
       			     ;only one broker for the arbiter

       timeout		3	      ; 'ping' timeout 
       data_timeout	120	      ; 'data send' timeout
       max_check_attempts	3     ;  if at least max_check_attempts ping failed, the node is DEAD

       #advanced
       realm 	All
       }


##Now the modules for broker. First the 2 that are used, and all the others :)

#The log managment for ALL daemons (all in one log, cool isn't it? ).
define module{
       module_name      Simple-log
       module_type      simple_log
       path		/usr/local/shinken/var/nagios.log
       archive_path	/usr/local/shinken/var/archives/
}


#Status.dat and objects.cache export. For the old Nagios
#interface
define module{
       module_name		Status-Dat
       module_type		status_dat
       status_file		/usr/local/shinken/var/status.dat
       object_cache_file	/usr/local/shinken/var/objects.cache
       status_update_interval   15 ; update status.dat every 15s
}

##All other modules thtat can be called if you have installed
#the databses, or if you want to test something else :)

#Here the NDO/MySQL module
#So you can use with NagVis or Centreon
define module{
       module_name	ToNdodb_Mysql
       module_type	ndodb_mysql
       database		ndo       ; database name
       user		root      ; user of the database
       password		root      ; must be changed
       host		localhost ; host to connect to
       character_set	utf8      ;optionnal, UTF8 is the default
}


#Here a NDO/Oracle module. For Icinga web connexion
#Or for DBA that do not like MySQL
define module{
       module_name	ToNdodb_Oracle
       module_type	ndodb_oracle
       database		XE              ;database name (listener in fact)
       user		system          ;user to connect
       password		password        ;Yes I know I have to change my default password...
       oracle_home      /usr/lib/oracle/xe/app/oracle/product/10.2.0/server     ;optional, but can be useful
}


#Here for Merlin/MySQL. For the cool Ninja connexion
define module{
       module_name      ToMerlindb_Mysql
       module_type      merlindb
       backend          mysql    ;backend to use, here mysql databse
       database         merlin   ;database name
       user             root     ; ? .. yes, the user of the database...
       password         root     ; wtf? you ask?
       host		localhost ; host of the database
       character_set    utf8     ;optionnal, UTF8 is the default
}


#Here the Merlin/Sqlite. No one use it for now :)
#You look at something : it's also the merlindb module, like the previous,
#it's the same code, it's just the backend parameter that change (and path).
define module{
       module_name      ToMerlindb_Sqlite
       module_type      merlindb
       backend		sqlite 	  ;like the mysql, but sqlite :)
       database_path    /tmp/merlindb.sqlite  ;path of the sqlite file
}


#Here the couchdb export. Maybe use one day...
#I should do a mangodb too one day...
#and casandra...
#and voldemort...
#and all other NoSQL database in fact :)
define module{
       module_name      ToCouchdb
       module_type      couchdb
       user             root
       password         root
       host		localhost
}


#Export services perfdata to flat file. for centreon or
#perfparse
define module{
       module_name      Service-Perfdata
       module_type      service_perfdata
       path		/usr/local/shinken/var/service-perfdata
#      mode		a ; optionnal. a = append, w = overwrite, p =pipe
#      template		$LASTSERVICECHECK$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICEOUTPUT$\t$SERVICEPERFDATA$\t$SERVICESTATE$\n
}


#For hosts this time
#like the previous, but for hosts....
define module{
       module_name      Host-Perfdata
       module_type      host_perfdata
       path		/usr/local/shinken/var/host-perfdata
#      mode             a ; optionnal. a = append, w = overwrite, p =pipe
#      template         $LASTHOSTCHECK$\t$HOSTNAME$\t$HOSTOUTPUT$\t$HOSTSTATE$\t$HOSTPERFDATA$\n

}


#You know livestatus? Yes, there a  Livestatus module for shinken too :)
define module{
       module_name      Livestatus
       module_type      livestatus
       host		*	; * = listen on all configured ip addresses
       port		50000   ; port to listen
       database_file    /usr/local/shinken/var/livestatus.db
}


#Send all logs to syslog
define module{
       module_name      Syslog
       module_type      syslog
}


#Use with the PNP interface
define module{
 module_name  NPCD
 module_type  npcdmod
 config_file  /usr/local/pnp4nagios/etc/npcd.cfg
}



############################# For the schedulers
#Now the good flat file retention module
define module{
       module_name      PickleRetention
       module_type      pickle_retention_file
       path             /tmp/retention.dat
}


############################# For the schedulers
#Now the good flat file retention module
define module{
       module_name      NagiosRetention
       module_type      nagios_retention_file
       path             /tmp/retention-nagios.dat
}


#Now the memcache one
#Now the good flat file retention module
define module{
       module_name      MemcacheRetention
       module_type      memcache_retention
       server           127.0.0.1
       port             11211
}


#And the redis one
#Now the good flat file retention module
define module{
       module_name      RedisRetention
       module_type      redis_retention
       server           127.0.0.1
}



#You know GLPI? You can load your hosts from this app (
#with the webservices plugins for GLPI, in xmlrpc mode)
#All hosts read from this will be added to the others of the
#standard flat file
#Warning : just load host_name, experimental.
define module{
       module_name      GLPIImport
       module_type      glpi_import
       uri 		http://localhost/glpi/plugins/webservices/xmlrpc.php
       login_name	glpi
       login_password	glpi
#       use_property       otherserial   ;optionnal. Will take use value from the otherserial
#			   field in GLPI (Inventory number:  in the web interface)
}

#You know NSCA? You can send check result to shinken
#using send_nsca command
define module{
       module_name       NSCA
       module_type       nsca_server
       host              *
       port              5667
       encryption_method 0
       password          helloworld
}




#The arbiter definition is optionnal
#WARNING : You must change host_name with the
#hostname of your machine !!!!
define arbiter{
       arbiter_name	Arbiter-Master
#       host_name	node1       ;result of the hostname command under Unix
       address		localhost		    ;IP or DNS adress
       port		7770
       spare		0
#uncomment the line below if you want to use the GLPI module and the NSCA one
#      modules		GLPIImport, NSCA
       }




#Very advanced feature for multisite managment.
#Consider look at the doc before touch it :)
define realm{
       realm_name  All
       default		1
}




###Now specific objects that allow easy change in the service/hots behavior

#A result modulation is use to module a check result, like CRITICAL->WARNING here
define resultmodulation{
       resultmodulation_name     critical_is_warning           ;required
       exit_codes_match          2                ;optionnal, list of code to change
       exit_code_modulation      1                ;code that will be put if the code match
       modulation_period         24×7    ;period when to apply the modulation
}
